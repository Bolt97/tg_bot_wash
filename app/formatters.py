# app/formatters.py
from __future__ import annotations
from decimal import Decimal
from typing import Any, Dict, List, Tuple
from collections import defaultdict

# ---- –î–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ ----
from app.models.transactions import TransactionItem, RevenueChannel


# ================================
#     –°–¢–ê–¢–£–°–´ –ú–û–ï–ö (TMS)
# ================================

# –ß—Ç–æ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–±–ª–µ–º–æ–π
PROBLEM_STATUSES = {"error", "alarm", "warning", "offline"}

# –î–ª—è –≤—ã–±–æ—Ä–∞ ¬´–Ω–∞–∏—Ö—É–¥—à–µ–≥–æ¬ª —Å—Ç–∞—Ç—É—Å–∞
SEVERITY_RANK = {
    "ok": 0,
    "online": 0,
    "warning": 1,
    "offline": 1,
    "alarm": 2,
    "error": 2,
}


def _norm_status(s: Any) -> str:
    if not s:
        return "ok"
    return str(s).strip().lower()


def _worst(a: str, b: str) -> str:
    return a if SEVERITY_RANK.get(a, 0) >= SEVERITY_RANK.get(b, 0) else b


def _is_ignorable_warning(status: str | None, text: str | None) -> bool:
    """
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∏–¥–∞: status == 'warning' –∏ text == 'connection failed'
    (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞/–ø—Ä–æ–±–µ–ª–æ–≤).
    """
    st = _norm_status(status)
    tx = (text or "").strip().lower()
    return st == "warning" and tx == "connection failed"


def _collect_problem_modules(mods: List[Dict[str, Any]] | None, out: List[Tuple[str, str, str | None]]) -> None:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏: (display_name, status, text)
    """
    if not mods:
        return
    for m in mods:
        st = _norm_status(m.get("status"))
        if st != "ok":
            name = m.get("full_name") or m.get("name") or m.get("id") or "module"
            text = m.get("text")
            out.append((name, st, text))
        # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–≥–ª—É–±—å
        _collect_problem_modules(m.get("modules"), out)


def is_bad_wash(wash: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–±–ª–µ–º–Ω–æ–π —Å—á–∏—Ç–∞–µ–º –º–æ–π–∫—É, –µ—Å–ª–∏:
    - –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ (–Ω–µ ok, –ø—Ä–∏ —ç—Ç–æ–º –ù–ï warning 'connection failed'), –∏–ª–∏
    - –µ—Å—Ç—å error –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (status.type == error –∏–ª–∏ online_type == error).
    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è warning 'connection failed' –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    """
    status = (wash.get("status") or {})

    # –°–æ–±–µ—Ä—ë–º –≤—Å–µ –º–æ–¥—É–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    problems: List[Tuple[str, str, str | None]] = []
    _collect_problem_modules(wash.get("modules"), problems)
    _collect_problem_modules(status.get("modules"), problems)

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ warning
    problems = [
        (name, st, text)
        for (name, st, text) in problems
        if not _is_ignorable_warning(st, text)
    ]

    if problems:
        return True

    # –ï—Å–ª–∏ –º–æ–¥—É–ª–µ–π-–ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç, –Ω–æ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî —è–≤–Ω—ã–π error
    top = _norm_status(status.get("type"))
    online = _norm_status(status.get("online_type"))
    if top == "error" or online == "error":
        return True

    # –û—Å—Ç–∞–ª—å–Ω–æ–µ —Å—á–∏—Ç–∞–µ–º ¬´–Ω–µ –ø—Ä–æ–±–ª–µ–º–æ–π¬ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Ç.—á. warning –±–µ–∑ –º–æ–¥—É–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π)
    return False


def _worst_status_for_wash(wash: Dict[str, Any]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ¬´–Ω–∞–∏—Ö—É–¥—à–∏–π¬ª —Å—Ç–∞—Ç—É—Å –º–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ status.type, status.online_type –∏ –º–æ–¥—É–ª–µ–π.
    """
    worst = _norm_status((wash.get("status") or {}).get("type"))
    online = _norm_status((wash.get("status") or {}).get("online_type"))
    worst = _worst(worst, online)

    tmp: List[Tuple[str, str, str | None]] = []
    _collect_problem_modules(wash.get("modules"), tmp)
    _collect_problem_modules((wash.get("status") or {}).get("modules"), tmp)
    for _name, st, _text in tmp:
        worst = _worst(worst, _norm_status(st))

    return worst or "ok"


def _status_emoji(status: str) -> str:
    s = _norm_status(status)
    if s in ("error", "alarm"):
        return "üö®"
    if s in ("warning", "offline"):
        return "‚ö†Ô∏è"
    return "‚úÖ"


def format_washes(washes: List[Dict[str, Any]], only_bad: bool = False) -> str:
    """
    –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –º–æ–µ–∫.
    –ï—Å–ª–∏ only_bad=True ‚Äî –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ.
    –î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –º–æ–π–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –º–æ–¥—É–ª—å–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º
    (–∏–≥–Ω–æ—Ä–∏—Ä—É—è warning 'connection failed').
    """
    lines: List[str] = []
    for w in washes:
        if only_bad and not is_bad_wash(w):
            continue

        name = w.get("location_name") or w.get("location") or w.get("address") or f"ID {w.get('id')}"
        unit_id = w.get("id") or w.get("unit_id") or "-"
        worst = _worst_status_for_wash(w)
        emoji = _status_emoji(worst)

        # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –ø–æ –º–æ–π–∫–µ
        lines.append(f"{emoji} <b>{name}</b> ‚Äî <code>{worst}</code> (id {unit_id})")

        # –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏
        problems: List[Tuple[str, str, str | None]] = []
        _collect_problem_modules(w.get("modules"), problems)
        _collect_problem_modules((w.get("status") or {}).get("modules"), problems)

        # —É–±–µ—Ä—ë–º –¥—É–±–ª–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ name+status+text)
        seen = set()
        unique = []
        for p in problems:
            key = (p[0], p[1], p[2] or "")
            if key not in seen:
                seen.add(key)
                unique.append(p)

        # –≤—ã–≤–æ–¥–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ warning
        for mod_name, st, text in unique:
            st_norm = _norm_status(st)
            if _is_ignorable_warning(st_norm, text):
                continue
            if text:
                lines.append(f"‚Ä¢ <b>{mod_name}</b>: <code>{st_norm}</code> ‚Äî {text}")
            else:
                lines.append(f"‚Ä¢ <b>{mod_name}</b>: <code>{st_norm}</code>")

    if only_bad:
        if not lines:
            return "‚úÖ –ê–≤–∞—Ä–∏–π–Ω—ã—Ö –º–æ–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        header = "üö® –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)"
    else:
        header = "üßº –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"

    return f"{header}\n\n" + "\n".join(lines)


# ================================
#     –í–´–†–£–ß–ö–ê (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)
# ================================

class RevenueReport:
    def __init__(self, cash: Decimal = Decimal("0"),
                 card: Decimal = Decimal("0"),
                 yandex_wash: Decimal = Decimal("0")):
        self.cash = cash
        self.card = card
        self.yandex_wash = yandex_wash

    @property
    def total(self) -> Decimal:
        return self.cash + self.card + self.yandex_wash


def aggregate_revenue(transactions: List[TransactionItem]) -> RevenueReport:
    """
    –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∏ —Å–æ–±—Ä–∞—Ç—å —Å—É–º–º—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º.
    –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ (approved, –Ω–µ cancelled) ‚Äî –ª–æ–≥–∏–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö.
    """
    rep = RevenueReport()
    for t in transactions:
        amount, channel = t.revenue_amount_and_channel()
        if not channel or amount <= 0:
            continue
        if channel == RevenueChannel.CASH:
            rep.cash += amount
        elif channel == RevenueChannel.CARD:
            rep.card += amount
        elif channel == RevenueChannel.YANDEX_WASH:
            rep.yandex_wash += amount
    return rep


def _fmt_amount(value: Decimal) -> str:
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á –ø—Ä–æ–±–µ–ª–æ–º, 2 –∑–Ω–∞–∫–∞
    return f"{value:,.2f}".replace(",", " ")


def format_revenue_report_simple(report: RevenueReport, from_d: str, to_d: str) -> str:
    if from_d == to_d:
        header = f"üìä –í—ã—Ä—É—á–∫–∞ –∑–∞ {from_d}"
    else:
        header = f"üìä –í—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_d} ‚Äî {to_d}"

    lines = [
        header,
        f"‚Äî –ù–∞–ª–∏—á–Ω—ã–µ:    {_fmt_amount(report.cash)} RUB",
        f"‚Äî –ë–µ–∑–Ω–∞–ª:      {_fmt_amount(report.card)} RUB",
        f"‚Äî Yandex.Wash: {_fmt_amount(report.yandex_wash)} RUB",
        f"‚Äî –ò—Ç–æ–≥–æ:       {_fmt_amount(report.total)} RUB",
    ]
    return "\n".join(lines)