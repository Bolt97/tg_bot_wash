# app/formatters.py
from __future__ import annotations
from decimal import Decimal
from typing import List

from app.models.transactions import TransactionItem, RevenueChannel


# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ ----------
def is_bad_wash(wash: dict) -> bool:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ñ–∏–ª—å—Ç—Ä "–ø–ª–æ—Ö–∏—Ö" –º–æ–µ–∫:
    —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–±–ª–µ–º–æ–π, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å != 'OK' (–∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ state/error).
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ç–≤–æ—é –º–æ–¥–µ–ª—å wash.
    """
    state = str(wash.get("state", "")).lower()
    error = str(wash.get("error", "")).lower()
    if state and state != "ok":
        return True
    if error and error not in {"", "ok", "none"}:
        return True
    return False


def format_washes(data: List[dict], only_bad: bool = False) -> str:
    """
    –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –º–æ–µ–∫.
    """
    lines: list[str] = []
    bad_count = 0
    for w in data:
        if only_bad and not is_bad_wash(w):
            continue
        unit_id = w.get("id") or w.get("unit_id") or "?"
        state = w.get("state") or "?"
        lines.append(f"‚Äî ID {unit_id}: {state}")
        if is_bad_wash(w):
            bad_count += 1

    if not lines:
        return "‚úÖ –í—Å–µ –º–æ–π–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ."

    header = "‚ö†Ô∏è –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–≤–∞—Ä–∏–π–Ω—ã–µ)" if only_bad else "‚ÑπÔ∏è –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"
    return "\n".join([header] + lines)


# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ ----------
class RevenueReport:
    def __init__(self, cash: Decimal = Decimal("0"),
                 card: Decimal = Decimal("0"),
                 yandex_wash: Decimal = Decimal("0")):
        self.cash = cash
        self.card = card
        self.yandex_wash = yandex_wash

    @property
    def total(self) -> Decimal:
        return self.cash + self.card + self.yandex_wash


def _fmt_amount(value: Decimal) -> str:
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á –ø—Ä–æ–±–µ–ª–æ–º, 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return f"{value:,.2f}".replace(",", " ")


def format_revenue_report_simple(report: RevenueReport, from_d: str, to_d: str) -> str:
    lines: list[str] = []
    if from_d == to_d:
        lines.append(f"üìä –í—ã—Ä—É—á–∫–∞ –∑–∞ {from_d}")
    else:
        lines.append(f"üìä –í—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_d} ‚Äî {to_d}")

    lines.append(f"‚Äî –ù–∞–ª–∏—á–Ω—ã–µ:    {_fmt_amount(report.cash)} RUB")
    lines.append(f"‚Äî –ë–µ–∑–Ω–∞–ª:      {_fmt_amount(report.card)} RUB")
    lines.append(f"‚Äî Yandex.Wash: {_fmt_amount(report.yandex_wash)} RUB")
    lines.append(f"‚Äî –ò—Ç–æ–≥–æ:       {_fmt_amount(report.total)} RUB")

    return "\n".join(lines)


# ---------- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ----------
def aggregate_revenue(transactions: List[TransactionItem]) -> RevenueReport:
    """
    –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∏ —Å–æ–±—Ä–∞—Ç—å —Å—É–º–º—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º.
    """
    report = RevenueReport()
    for t in transactions:
        amount, channel = t.revenue_amount_and_channel()
        if not channel:
            continue
        if channel == RevenueChannel.CASH:
            report.cash += amount
        elif channel == RevenueChannel.CARD:
            report.card += amount
        elif channel == RevenueChannel.YANDEX_WASH:
            report.yandex_wash += amount
    return report