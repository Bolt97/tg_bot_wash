from __future__ import annotations
import json
import logging
from io import BytesIO
from typing import Optional
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import BadRequest, Forbidden

from app.config import Config
from app.logging_setup import setup_logging
from app.formatters import format_washes, is_bad_wash
from app.services.tms_client import TMSClient, redact_headers

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
_last_hash: Optional[str] = None
_last_poll_ok_at: Optional[datetime] = None  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞

def _hash_text(s: str) -> str:
    import hashlib
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

async def _send_debug(bot: Bot, chat_id: int, title: str, body: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞/—Ñ–∞–π–ª–∞ –≤ —á–∞—Ç –¥–ª—è –¥–µ–±–∞–≥–∞. –ò—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç."""
    if not chat_id:
        return
    MAX = 3800
    try:
        if len(body) <= MAX:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üß™ {title}\n<pre>{body}</pre>",
                parse_mode="HTML",
                disable_web_page_preview=True,
            )
        else:
            bio = BytesIO(body.encode("utf-8"))
            bio.name = f"{title.replace(' ', '_')}.txt"
            await bot.send_document(chat_id=chat_id, document=bio, caption=f"üß™ {title}")
    except (BadRequest, Forbidden) as e:
        logger.warning("debug send failed to %s: %s", chat_id, e)
    except Exception as e:
        logger.exception("unexpected debug send error: %s", e)

# ---------------- –°—Ç–∞—Ç—É—Å—ã ----------------
async def _poll_and_send(context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏. RAW-–æ—Ç–≤–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–±–ª–µ–º."""
    global _last_hash, _last_poll_ok_at
    cfg: Config = context.application.bot_data["cfg"]

    logger.info("Polling statuses...")

    if not cfg.wash_ids:
        await context.bot.send_message(chat_id=cfg.group_chat_id, text="‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ WASH_IDS.")
        return
    if not cfg.tms_cookie:
        await context.bot.send_message(chat_id=cfg.group_chat_id, text="‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω TMS_COOKIE.")
        return

    try:
        async with TMSClient(cfg.tms_base_url, cfg.tms_cookie) as tms:
            data, raw, status_code, resp_h, req_h = await tms.fetch_units(cfg.tms_project_id, cfg.wash_ids)

        text = format_washes(data, only_bad=cfg.only_bad)
        bad_present = any(is_bad_wash(w) for w in data)

        # –°—ã—Ä—ã–µ –ª–æ–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if cfg.debug_on_bad and bad_present and cfg.debug_chat_id:
            head = json.dumps({
                "url": f"{cfg.tms_base_url}/api/v1/project/{cfg.tms_project_id}/unit/full",
                "status": status_code,
                "request_headers": redact_headers(req_h),
                "response_headers": redact_headers(resp_h),
                "request_body": cfg.wash_ids,
            }, ensure_ascii=False, indent=2)
            await _send_debug(context.bot, cfg.debug_chat_id, "TMS /unit/full (bad detected)", f"{head}\n\n{raw}")

        h = _hash_text(text)
        if h != _last_hash:
            _last_hash = h
            await context.bot.send_message(chat_id=cfg.group_chat_id, text=text)
        else:
            logger.info("No changes in summary; skip sending.")

        _last_poll_ok_at = datetime.now(ZoneInfo(cfg.timezone))

    except Exception as e:
        logger.exception("Polling failed: %s", e)
        await context.bot.send_message(chat_id=cfg.group_chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")

# ---------------- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è ¬´–≤—ã—Ä—É—á–∫–∞¬ª (–∑–∞–≥–ª—É—à–∫–∞) ----------------
async def _send_daily_revenue_stub(context: ContextTypes.DEFAULT_TYPE):
    cfg: Config = context.application.bot_data["cfg"]
    chat_id = cfg.revenue_chat_id or cfg.group_chat_id
    try:
        now = datetime.now(ZoneInfo(cfg.timezone)).strftime("%Y-%m-%d %H:%M:%S %Z")
        await context.bot.send_message(chat_id=chat_id, text=f"üìä –¢—É—Ç –±—É–¥–µ—Ç –≤—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å\n({now})")
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

def _seconds_until_next(hour: int, minute: int, tz_name: str) -> int:
    tz = ZoneInfo(tz_name)
    now = datetime.now(tz)
    next_run = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if next_run <= now:
        from datetime import timedelta
        next_run += timedelta(days=1)
    return int((next_run - now).total_seconds())

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _poll_and_send(context)

async def cmd_whereami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    await update.message.reply_text(f"chat_id: {chat.id}\nchat_type: {chat.type}\nuser_id: {user.id if user else 'n/a'}")

async def cmd_status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –∑–∞–¥–∞—á"""
    cfg: Config = context.application.bot_data["cfg"]
    tz = ZoneInfo(cfg.timezone)
    started_at: datetime = context.application.bot_data.get("started_at")  # —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main()
    uptime = None
    if started_at:
        uptime = datetime.now(tz) - started_at

    # —Å–æ–±–µ—Ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–¥–∞—á–∞–º
    jobs = context.job_queue.jobs() if context.job_queue else []
    lines = []
    lines.append("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    if uptime is not None:
        # –∫—Ä–∞—Å–∏–≤–æ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ
        total_sec = int(uptime.total_seconds())
        hours = total_sec // 3600
        minutes = (total_sec % 3600) // 60
        seconds = total_sec % 60
        lines.append(f"‚è± Uptime: {hours:02d}:{minutes:02d}:{seconds:02d}")

    if _last_poll_ok_at:
        lines.append(f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ–ø—Ä–æ—Å: {_last_poll_ok_at.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S %Z')}")
    else:
        lines.append("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ–ø—Ä–æ—Å: –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if jobs:
        lines.append("üß∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for j in jobs:
            next_t = getattr(j, "next_t", None)
            if next_t:
                try:
                    next_local = next_t.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                except Exception:
                    next_local = str(next_t)
                lines.append(f"‚Ä¢ {j.name}: —Å–ª–µ–¥. –∑–∞–ø—É—Å–∫ {next_local}")
            else:
                lines.append(f"‚Ä¢ {j.name}: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        lines.append("üß∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ—Ç")

    # –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏
    lines.append("")
    lines.append(f"‚öôÔ∏è ONLY_BAD={cfg.only_bad} | DEBUG_ON_BAD={cfg.debug_on_bad}")
    lines.append(f"üåê TIMEZONE={cfg.timezone}")
    lines.append(f"üìÖ DAILY_REVENUE={'on' if cfg.enable_daily_revenue else 'off'} (01:00)")
    await update.message.reply_text("\n".join(lines))

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled error: %s", context.error)

# ---------------- Entry point ----------------
def main():
    cfg = Config.load()
    if not cfg.bot_token or not cfg.group_chat_id:
        raise RuntimeError("BOT_TOKEN/GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

    setup_logging(cfg.log_to_file, cfg.log_file_path)
    logger.info("Starting bot...")

    app = Application.builder().token(cfg.bot_token).build()
    app.bot_data["cfg"] = cfg
    app.bot_data["started_at"] = datetime.now(ZoneInfo(cfg.timezone))

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("whereami", cmd_whereami))
    app.add_handler(CommandHandler("status_bot", cmd_status_bot))
    app.add_error_handler(on_error)

    if app.job_queue is None:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏ extra: pip install 'python-telegram-bot[job-queue]'")

    # 1) –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É (first=0) ‚Äî –ë–ï–ó /start
    app.job_queue.run_repeating(
        _poll_and_send,
        interval=timedelta(minutes=5),
        first=0,
        name="poll_statuses",
    )

    # 2) –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è ¬´–≤—ã—Ä—É—á–∫–∞¬ª ‚Äî –±–ª–∏–∂–∞–π—à–∞—è 01:00 –≤ –Ω—É–∂–Ω–æ–π TZ, –¥–∞–ª–µ–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    if cfg.enable_daily_revenue:
        delay = _seconds_until_next(1, 0, cfg.timezone)
        app.job_queue.run_repeating(
            _send_daily_revenue_stub,
            interval=24 * 60 * 60,
            first=delay,
            name="daily_revenue_stub",
        )
        logger.info("Daily revenue stub scheduled at 01:00 %s (first in %s sec)", cfg.timezone, delay)

    app.run_polling()

if __name__ == "__main__":
    main()