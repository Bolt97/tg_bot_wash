from __future__ import annotations
import logging
from typing import Optional
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from app.config import Config
from app.logging_setup import setup_logging
from app.formatters import format_washes, is_bad_wash, format_revenue_report_simple
from app.services.tms_client import TMSClient
from app.models.transactions import TransactionsResponse

logger = logging.getLogger(__name__)

_last_poll_ok_at: Optional[datetime] = None  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞


# ---------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ----------------
def _seconds_until_next(hour: int, minute: int, tz_name: str) -> int:
    tz = ZoneInfo(tz_name)
    now = datetime.now(tz)
    next_run = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if next_run <= now:
        from datetime import timedelta as _td
        next_run += _td(days=1)
    return int((next_run - now).total_seconds())


def _parse_revenue_args(args: list[str], tz_name: str) -> tuple[str, str]:
    """
    –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /revenue:
      - [] -> —Å–µ–≥–æ–¥–Ω—è
      - [YYYY-MM-DD] -> from=to=—ç—Ç–∞ –¥–∞—Ç–∞
      - [YYYY-MM-DD YYYY-MM-DD] -> from/to
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (date_from, date_to) –≤ ISO 'YYYY-MM-DD'.
    """
    tz = ZoneInfo(tz_name)
    fmt = "%Y-%m-%d"

    if not args:
        d = datetime.now(tz).date()
        return d.isoformat(), d.isoformat()

    if len(args) == 1:
        try:
            d = datetime.strptime(args[0], fmt).date()
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä: /revenue 2025-09-07")
        return d.isoformat(), d.isoformat()

    if len(args) == 2:
        try:
            d1 = datetime.strptime(args[0], fmt).date()
            d2 = datetime.strptime(args[1], fmt).date()
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /revenue 2025-09-06 2025-09-08")
        if d2 < d1:
            d1, d2 = d2, d1
        return d1.isoformat(), d2.isoformat()

    raise ValueError("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revenue [YYYY-MM-DD] –∏–ª–∏ /revenue YYYY-MM-DD YYYY-MM-DD")


# ---------------- –°—Ç–∞—Ç—É—Å—ã ----------------
async def _poll_and_send(context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤. –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–π–∫–∏."""
    global _last_poll_ok_at
    cfg: Config = context.application.bot_data["cfg"]

    logger.info("Polling statuses...")

    if not cfg.wash_ids:
        await context.bot.send_message(chat_id=cfg.group_chat_id, text="‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ WASH_IDS.")
        return
    if not cfg.tms_cookie:
        await context.bot.send_message(chat_id=cfg.group_chat_id, text="‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω TMS_COOKIE.")
        return

    try:
        async with TMSClient(cfg.tms_base_url, cfg.tms_cookie) as tms:
            data, _raw, _status_code, _resp_h, _req_h = await tms.fetch_units(cfg.tms_project_id, cfg.wash_ids)

        bad_present = any(is_bad_wash(w) for w in data)
        if bad_present:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¢–û–õ–¨–ö–û –ø–æ –∞–≤–∞—Ä–∏–π–Ω—ã–º
            text = format_washes(data, only_bad=True)
            await context.bot.send_message(chat_id=cfg.group_chat_id, text=text)
        else:
            logger.info("All good; no bad statuses. (no message sent)")

        _last_poll_ok_at = datetime.now(ZoneInfo(cfg.timezone))

    except Exception as e:
        logger.exception("Polling failed: %s", e)
        await context.bot.send_message(chat_id=cfg.group_chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")


# ---------------- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è ¬´–≤—ã—Ä—É—á–∫–∞¬ª (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) ----------------
async def _send_daily_revenue_stub(context: ContextTypes.DEFAULT_TYPE):
    cfg: Config = context.application.bot_data["cfg"]
    chat_id = cfg.revenue_chat_id or cfg.group_chat_id
    try:
        now = datetime.now(ZoneInfo(cfg.timezone)).strftime("%Y-%m-%d %H:%M:%S %Z")
        await context.bot.send_message(chat_id=chat_id, text=f"üìä –¢—É—Ç –±—É–¥–µ—Ç –≤—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å\n({now})")
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)


# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è —Å–≤–æ–¥–∫–∞: –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ä–∏–π–Ω—ã–µ, –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º."""
    cfg: Config = context.application.bot_data["cfg"]
    try:
        async with TMSClient(cfg.tms_base_url, cfg.tms_cookie) as tms:
            data, _raw, _status_code, _resp_h, _req_h = await tms.fetch_units(cfg.tms_project_id, cfg.wash_ids)
        bad_present = any(is_bad_wash(w) for w in data)
        text = format_washes(data, only_bad=True) if bad_present else "‚úÖ –ê–≤–∞—Ä–∏–π–Ω—ã—Ö –º–æ–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")


async def cmd_whereami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    await update.message.reply_text(f"chat_id: {chat.id}\nchat_type: {chat.type}\nuser_id: {user.id if user else 'n/a'}")


async def cmd_status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –∑–∞–¥–∞—á"""
    cfg: Config = context.application.bot_data["cfg"]
    tz = ZoneInfo(cfg.timezone)
    started_at: datetime = context.application.bot_data.get("started_at")
    uptime = None
    if started_at:
        uptime = datetime.now(tz) - started_at

    jobs = context.job_queue.jobs() if context.job_queue else []
    lines = []
    lines.append("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    if uptime:
        total_sec = int(uptime.total_seconds())
        h = total_sec // 3600
        m = (total_sec % 3600) // 60
        s = total_sec % 60
        lines.append(f"‚è± Uptime: {h:02d}:{m:02d}:{s:02d}")
    if _last_poll_ok_at:
        lines.append(f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ–ø—Ä–æ—Å: {_last_poll_ok_at.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S %Z')}")
    else:
        lines.append("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ–ø—Ä–æ—Å: –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if jobs:
        lines.append("üß∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for j in jobs:
            next_t = getattr(j, "next_t", None)
            if next_t:
                try:
                    next_local = next_t.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S %Z')
                except Exception:
                    next_local = str(next_t)
                lines.append(f"‚Ä¢ {j.name}: —Å–ª–µ–¥. –∑–∞–ø—É—Å–∫ {next_local}")
            else:
                lines.append(f"‚Ä¢ {j.name}: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        lines.append("üß∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ—Ç")

    lines.append("")
    lines.append(f"üåê TIMEZONE={cfg.timezone}")
    lines.append(f"üìÖ DAILY_REVENUE={'on' if cfg.enable_daily_revenue else 'off'} (01:00)")
    await update.message.reply_text("\n".join(lines))


async def cmd_revenue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /revenue                      -> —Å–µ–≥–æ–¥–Ω—è
    /revenue 2025-09-07           -> –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
    /revenue 2025-09-06 2025-09-08 -> –ø–µ—Ä–∏–æ–¥
    """
    cfg: Config = context.application.bot_data["cfg"]
    try:
        date_from, date_to = _parse_revenue_args(context.args or [], cfg.timezone)
    except Exception as e:
        await update.message.reply_text(f"‚ùó {e}")
        return

    try:
        async with TMSClient(cfg.tms_base_url, cfg.tms_cookie) as tms:
            data, _raw, _status, _resp_h, _req_h = await tms.fetch_transactions(
                org_id=cfg.org_id, date_from=date_from, date_to=date_to, max_count=1500
            )
        resp = TransactionsResponse.model_validate(data)
        text = format_revenue_report_simple(resp.items, date_from, date_to, currency="RUB")
        await update.message.reply_text(text)
    except Exception as e:
        logger.exception("Revenue fetch failed: %s", e)
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏: {e}")


async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    err = getattr(context, "error", None)
    logger.error("Unhandled error: %s", err)


# ---------------- Entry point ----------------
def main():
    cfg = Config.load()
    if not cfg.bot_token or not cfg.group_chat_id:
        raise RuntimeError("BOT_TOKEN/GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

    setup_logging(cfg.log_to_file, cfg.log_file_path)
    logger.info("Starting bot...")

    app = Application.builder().token(cfg.bot_token).build()
    app.bot_data["cfg"] = cfg
    app.bot_data["started_at"] = datetime.now(ZoneInfo(cfg.timezone))

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("whereami", cmd_whereami))
    app.add_handler(CommandHandler("status_bot", cmd_status_bot))
    app.add_handler(CommandHandler("revenue", cmd_revenue))
    app.add_error_handler(on_error)

    if app.job_queue is None:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏ extra: pip install 'python-telegram-bot[job-queue]'")

    # 1) –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É (first=0)
    app.job_queue.run_repeating(
        _poll_and_send,
        interval=timedelta(minutes=5),
        first=0,
        name="poll_statuses",
    )

    # 2) –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è ¬´–≤—ã—Ä—É—á–∫–∞¬ª ‚Äî –±–ª–∏–∂–∞–π—à–∞—è 01:00 –≤ –Ω—É–∂–Ω–æ–π TZ, –¥–∞–ª–µ–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    if cfg.enable_daily_revenue:
        delay = _seconds_until_next(1, 0, cfg.timezone)
        app.job_queue.run_repeating(
            _send_daily_revenue_stub,
            interval=24 * 60 * 60,
            first=delay,
            name="daily_revenue_stub",
        )
        logger.info("Daily revenue stub scheduled at 01:00 %s (first in %s sec)", cfg.timezone, delay)

    app.run_polling()


if __name__ == "__main__":
    main()