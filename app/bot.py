# app/bot.py
import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from zoneinfo import ZoneInfo

from .config import load_config
from .tasks.statuses import send_statuses
from .tasks.revenue import send_daily_revenue_stub

logger = logging.getLogger(__name__)

cfg = load_config()


async def cmd_status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status_bot ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤ –ª–∏ –±–æ—Ç"""
    jobs = context.job_queue.jobs()
    jobs_info = "\n".join([f"- {j.name} (next: {j.next_t})" for j in jobs]) or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"

    text = (
        "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        f"–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{jobs_info}"
    )
    await update.message.reply_text(text)


def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    )

    logger.info("Starting bot...")

    app = (
        ApplicationBuilder()
        .token(cfg.bot_token)
        .build()
    )

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("status_bot", cmd_status_bot))

    # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    app.job_queue.run_repeating(
        send_statuses,
        interval=300,  # 5 –º–∏–Ω—É—Ç
        first=5,
        name="send_statuses",
    )

    app.job_queue.run_daily(
        send_daily_revenue_stub,
        time=asyncio.time(0, 0),  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
        name="daily_revenue",
        # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç tzinfo, –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –Ω–µ–≥–æ
        # tzinfo=ZoneInfo(cfg.timezone),
    )

    app.run_polling()


if __name__ == "__main__":
    main()